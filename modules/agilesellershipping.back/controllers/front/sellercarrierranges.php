<?php
///-build_id: 2016071823.0745
/// This source file is subject to the Software License Agreement that is bundled with this 
/// package in the file license.txt, or you can get it here
/// http://addons-modules.com/en/content/3-terms-and-conditions-of-use
///
/// @copyright  2009-2012 Addons-Modules.com
///  If you need open code to customize or merge code with othe modules, please contact us.
include_once(_PS_ROOT_DIR_ .'/modules/agilesellershipping/agilesellershipping.php');

class AgileSellerShippingSellerCarrierRangesModuleFrontController extends AgileModuleFrontController
{
	const DEFAULT_RANGE_MAX = 5000;
	
	public function __construct()   {    parent::__construct();             $this->table = 'carrier';          $this->identifier = 'id_carrier';          $this->className = 'Carrier';      }       public function init()   {    parent::init();        header('Cache-Control: no-cache, must-revalidate');    header('Expires: Sat, 26 Jul 1997 05:00:00 GMT');      $this->max_image_size = (int)Configuration::get('PS_PRODUCT_PICTURE_MAX_SIZE') / 1000;    $this->languages = Language::getLanguages(false);    $this->id_object = Carrier::getActiveIDByID((int)Tools::getValue('id_carrier'));    if($this->id_object != (int)Tools::getValue('id_carrier'))    {     Tools::redirect($this->context->link->getModuleLink('agilesellershipping','sellercarrierdetail',array('id_carrier'=>$this->id_object), true));    }      $this->id_language = intval(Tools::getValue('id_language'));    $this->object = new Carrier($this->id_object);    if($this->object->is_free || $this->object->getShippingMethod() == Carrier::SHIPPING_METHOD_FREE){     Tools::redirect($this->context->link->getModuleLink('agilesellershipping','sellercarrierdetail',array('id_carrier'=>$this->id_object), true));    }        $R1B8AE585FCBE16464BB4673988D498E2 = AgileSellerManager::getObjectOwnerID('carrier', Tools::getValue('id_carrier'));    $R17580FDEFC33F6F2D6227DC3791548D7 = ($this->id_object == 0 OR ($R1B8AE585FCBE16464BB4673988D498E2 > 0 && $R1B8AE585FCBE16464BB4673988D498E2 == $this->sellerinfo->id_seller));    $RF096F676CD7E3159B177824FB957F8E5 = ($R1B8AE585FCBE16464BB4673988D498E2 == 0);    if(!$R17580FDEFC33F6F2D6227DC3791548D7 AND !$RF096F676CD7E3159B177824FB957F8E5)    {     $this->errors[] = Tools::displayError('You do not have permission to access carrier. ');    }        $this->context->smarty->assign(array(     'hasOwnerShip' => $R17580FDEFC33F6F2D6227DC3791548D7     ,'isSharedCarrier' => $RF096F676CD7E3159B177824FB957F8E5    ));   }      public function getMessage($RF413F06AEBBCEF5E1C8B1019DEE6FE6B)   {    $RA43A52C3D1634FFA3BF745E85786DC5E = array(     'Price rule successfully updated' => $this->l('Price rule successfully updated')     ,'If you wish to use the advanced stock management, you have to:' => $this->l('If you wish to use the advanced stock management, you have to:')     ,'associate your carriers with warehouses' => $this->l('associate your carriers with warehouses')     ,'associate your warehouses with carriers' => $this->l('associate your warehouses with carriers')     ,'associate your warehouses with the appropriate shops' => $this->l('associate your warehouses with the appropriate shops')     ,'You must have a common warehouse between this pack and its carrier.' => $this->l('You must have a common warehouse between this pack and its carrier.')     ,'You must save this carrier before managing quantities.' => $this->l('You must save this carrier before managing quantities.')     ,'You must save this carrier before adding specific prices' => $this->l('You must save this carrier before adding specific prices')     ,'This feature has been disabled, you can activate this feature at this page:' => $this->l('This feature has been disabled, you can activate this feature at this page:')     ,'link to Performances' => $this->l('link to Performances')     ,'A virtual carrier cannot have combinations.' => $this->l('A virtual carrier cannot have combinations.')     ,'You must save this carrier before adding combinations.' => $this->l('You must save this carrier before adding combinations.')    );    return $RA43A52C3D1634FFA3BF745E85786DC5E[$RF413F06AEBBCEF5E1C8B1019DEE6FE6B];   }      public function setMedia()   {    parent::setMedia();      if ($this->context->getMobileDevice() == false)    {     $this->addJqueryPlugin(array('idTabs'));    }        if (!Configuration::get('PS_QUICK_VIEW'))    {     $this->addjqueryPlugin('fancybox');    }   }      public function displayAjax()   {    $RD35A39212FD75E833AEA38F90831B2CB = Tools::getValue('action');    $RA1E9875178EBED6AD805307808852705 = Tools::getValue('range_id');        switch ($this->object->shipping_method)    {     case intval(Carrier::SHIPPING_METHOD_DEFAULT):      $R83D51901D1AD2F40026197D78F7E691E = 'Default';      if(Configuration::Get('PS_SHIPPING_METHOD')==0)      {       $R83D51901D1AD2F40026197D78F7E691E = 'Price Ranges';       $R79B739026282B3B62D9F48661BE5CED4 = RangePrice::getRanges($this->id_object);      }      else      {       $R83D51901D1AD2F40026197D78F7E691E = 'Weight Ranges';       $R79B739026282B3B62D9F48661BE5CED4 = RangeWeight::getRanges($this->id_object);      }       break;     case intval(Carrier::SHIPPING_METHOD_PRICE):      $R83D51901D1AD2F40026197D78F7E691E = 'Price Ranges';      $R79B739026282B3B62D9F48661BE5CED4 = RangePrice::getRanges($this->id_object);      break;     case intval(Carrier::SHIPPING_METHOD_WEIGHT):      $R83D51901D1AD2F40026197D78F7E691E = 'Weight Ranges';      $R79B739026282B3B62D9F48661BE5CED4 = RangeWeight::getRanges($this->id_object);      break;    }        if($RD35A39212FD75E833AEA38F90831B2CB == 'edit')    {     $RB0253597862B1707EA13F71BDE4046B6 = Tools::getValue('from');     $R9E14437ACD29B79105DE60C9C0413C03 = Tools::getValue('to');          if ($RB0253597862B1707EA13F71BDE4046B6 >= $R9E14437ACD29B79105DE60C9C0413C03)      $this->errors[] = Tools::displayError('Invalid range');          if($R83D51901D1AD2F40026197D78F7E691E == 'Price Ranges')     {      if (RangePrice::rangeExist((int)$this->id_object, (float)$RB0253597862B1707EA13F71BDE4046B6, (float)$R9E14437ACD29B79105DE60C9C0413C03))       $this->errors[] = Tools::displayError('Range already exists');      else if (RangePrice::isOverlapping((int)$this->id_object, (float)$RB0253597862B1707EA13F71BDE4046B6, (float)$R9E14437ACD29B79105DE60C9C0413C03, ($RA1E9875178EBED6AD805307808852705 ? (int)$RA1E9875178EBED6AD805307808852705 : null)))       $this->errors[] = Tools::displayError('Ranges are overlapping');     }else     {      if (RangeWeight::rangeExist((int)$this->id_object, (float)$RB0253597862B1707EA13F71BDE4046B6, (float)$R9E14437ACD29B79105DE60C9C0413C03))       $this->errors[] = Tools::displayError('Range already exists');      else if (RangeWeight::isOverlapping((int)$this->id_object, (float)$RB0253597862B1707EA13F71BDE4046B6, (float)$R9E14437ACD29B79105DE60C9C0413C03, ($RA1E9875178EBED6AD805307808852705 ? (int)$RA1E9875178EBED6AD805307808852705 : null)))       $this->errors[] = Tools::displayError('Ranges are overlapping');     }     $RB8D8980F155AA1475A25A57A6B2DF92E = isset($this->errors) && count($this->errors) > 0? 0:1;     if($RB8D8980F155AA1475A25A57A6B2DF92E)     {      if($RA1E9875178EBED6AD805307808852705 >= 0)      {       if($R83D51901D1AD2F40026197D78F7E691E == 'Price Ranges')       {        $R7FDA5CCB82AEE2AA4715A8E84612E87B = new RangePrice($RA1E9875178EBED6AD805307808852705);       }else       {        $R7FDA5CCB82AEE2AA4715A8E84612E87B = new RangeWeight($RA1E9875178EBED6AD805307808852705);       }       $R7FDA5CCB82AEE2AA4715A8E84612E87B->id_carrier = (int)$this->id_object;       $R7FDA5CCB82AEE2AA4715A8E84612E87B->delimiter1 = $RB0253597862B1707EA13F71BDE4046B6;       $R7FDA5CCB82AEE2AA4715A8E84612E87B->delimiter2 = $R9E14437ACD29B79105DE60C9C0413C03;              if(!$R7FDA5CCB82AEE2AA4715A8E84612E87B->update())       {        $this->errors[] = Tools::displayError('An error occurred while updating object.');       }      }      else      {       if($R83D51901D1AD2F40026197D78F7E691E == 'Price Ranges')       {        $R7FDA5CCB82AEE2AA4715A8E84612E87B = new RangePrice();       }else       {        $R7FDA5CCB82AEE2AA4715A8E84612E87B = new RangeWeight();       }       $R7FDA5CCB82AEE2AA4715A8E84612E87B->id_carrier = (int)$this->id_object;       $R7FDA5CCB82AEE2AA4715A8E84612E87B->delimiter1 = $RB0253597862B1707EA13F71BDE4046B6;       $R7FDA5CCB82AEE2AA4715A8E84612E87B->delimiter2 = $R9E14437ACD29B79105DE60C9C0413C03;         if(!$R7FDA5CCB82AEE2AA4715A8E84612E87B->add())       {        $this->errors[] = Tools::displayError('An error occurred while creating object.');       }       $RA1E9875178EBED6AD805307808852705 = $R7FDA5CCB82AEE2AA4715A8E84612E87B->id;      }     }     $RB8D8980F155AA1475A25A57A6B2DF92E = isset($this->errors) && count($this->errors) > 0? 0:1;     $RF22A1FC2263E04EC8AE7A008A249229E = array(      'range_id' => isset($RA1E9875178EBED6AD805307808852705)? $RA1E9875178EBED6AD805307808852705 : 0,      'from' => $RB0253597862B1707EA13F71BDE4046B6,      'to' => $R9E14437ACD29B79105DE60C9C0413C03,      'success' => count($this->errors) > 0? 0:1,      'errors' => $this->errors,      );    }else if ($RD35A39212FD75E833AEA38F90831B2CB == 'delete')    {     $RA1E9875178EBED6AD805307808852705 = Tools::getValue('range_id');     if($R83D51901D1AD2F40026197D78F7E691E == 'Price Ranges')     {      $R7FDA5CCB82AEE2AA4715A8E84612E87B = new RangePrice($RA1E9875178EBED6AD805307808852705);     }else     {      $R7FDA5CCB82AEE2AA4715A8E84612E87B = new RangeWeight($RA1E9875178EBED6AD805307808852705);     }     if(!$R7FDA5CCB82AEE2AA4715A8E84612E87B->delete())     {      $this->errors[] = Tools::displayError('An error occurred while deleting object.');     }     $RB8D8980F155AA1475A25A57A6B2DF92E = isset($this->errors) && count($this->errors) > 0? 0:1;     $RF22A1FC2263E04EC8AE7A008A249229E = array(      'range_id' => isset($RA1E9875178EBED6AD805307808852705)? $RA1E9875178EBED6AD805307808852705 : 0,      'success' => count($this->errors) > 0? 0:1,      'errors' => $this->errors,      );    }    die(Tools::jsonEncode($RF22A1FC2263E04EC8AE7A008A249229E));   }       public function initContent()   {    parent::initContent();      $R46EA1487D4C36CFD9F79F867F0E05EAB = $this->object->getZones();    $currency = $this->context->currency;    $R83D51901D1AD2F40026197D78F7E691E = $this->getShippingMethod($this->object->shipping_method);    $R27E91E57A057A2C8E18463BA69FA25B4 = 'id_'.$this->object->getRangeTable();    $R79B739026282B3B62D9F48661BE5CED4 = $this->getRanges($R83D51901D1AD2F40026197D78F7E691E);    if(empty($R79B739026282B3B62D9F48661BE5CED4))    {         if($R83D51901D1AD2F40026197D78F7E691E == 'Price Ranges')     {      $R7FDA5CCB82AEE2AA4715A8E84612E87B = new RangePrice();     }else     {      $R7FDA5CCB82AEE2AA4715A8E84612E87B = new RangeWeight();     }     $R7FDA5CCB82AEE2AA4715A8E84612E87B->id_carrier = (int)$this->id_object;     $R7FDA5CCB82AEE2AA4715A8E84612E87B->delimiter1 = 0;     $R7FDA5CCB82AEE2AA4715A8E84612E87B->delimiter2 = self::DEFAULT_RANGE_MAX;       $R7FDA5CCB82AEE2AA4715A8E84612E87B->add();     $R79B739026282B3B62D9F48661BE5CED4 = $this->getRanges($R83D51901D1AD2F40026197D78F7E691E);       }            $REEAC5ABC845DD2D68028BDD9DD286E5F = $this->object->getRangeSuffix();    $R3C54CF2ADCF429EDD5232719C8FCDC99 = Carrier::getDeliveryPriceByRanges($this->object->getRangeTable(), $this->id_object);        $RF6F1BEBA7F6D73D676DECB0C5CD89459 = array();    foreach ($R3C54CF2ADCF429EDD5232719C8FCDC99 as $R73CC304A74C0B73C502EE30895AC88DD)     $RF6F1BEBA7F6D73D676DECB0C5CD89459[$R73CC304A74C0B73C502EE30895AC88DD['id_zone']][$R73CC304A74C0B73C502EE30895AC88DD[$R27E91E57A057A2C8E18463BA69FA25B4]] = $R73CC304A74C0B73C502EE30895AC88DD['price'];    $this->context->smarty->assign(array(     'seller_tab_id' => 6     ,'id_language' => $this->id_language     ,'id_carrier' => $this->id_object     ,'carrier' => $this->object     ,'carrier_zones' => $R46EA1487D4C36CFD9F79F867F0E05EAB     ,'suffix' => $currency->getSign('right').' '.$this->l('(Tax Incl.)')     ,'range_type' => $R83D51901D1AD2F40026197D78F7E691E     ,'ranges' => $R79B739026282B3B62D9F48661BE5CED4     ,'currency' => $currency     ,'deliveryArray' => $RF6F1BEBA7F6D73D676DECB0C5CD89459     ,'rangeIdentifier' => $R27E91E57A057A2C8E18463BA69FA25B4     ,'range_suffix' => $REEAC5ABC845DD2D68028BDD9DD286E5F     ));      $this->setTemplate('sellercarrierranges.tpl');   }      private function getShippingMethod($R6E3CED3C0C347D45115DA9AA41DEEEDE)   {    switch ($R6E3CED3C0C347D45115DA9AA41DEEEDE)    {     case intval(Carrier::SHIPPING_METHOD_DEFAULT):      if(Configuration::Get('PS_SHIPPING_METHOD')==0)      {       $R83D51901D1AD2F40026197D78F7E691E = 'Price Ranges';      }      else      {       $R83D51901D1AD2F40026197D78F7E691E = 'Weight Ranges';      }       break;     case intval(Carrier::SHIPPING_METHOD_PRICE):      $R83D51901D1AD2F40026197D78F7E691E = 'Price Ranges';      break;     case intval(Carrier::SHIPPING_METHOD_WEIGHT):      $R83D51901D1AD2F40026197D78F7E691E = 'Weight Ranges';      break;    }        return $R83D51901D1AD2F40026197D78F7E691E;   }      private function getRanges($R83D51901D1AD2F40026197D78F7E691E)   {    if ($R83D51901D1AD2F40026197D78F7E691E == 'Price Ranges')    {     $R79B739026282B3B62D9F48661BE5CED4 = RangePrice::getRanges($this->id_object);    }else    {     $R79B739026282B3B62D9F48661BE5CED4 = RangeWeight::getRanges($this->id_object);    }        return $R79B739026282B3B62D9F48661BE5CED4;   }        public function postProcess()   {      $_POST['id_seller'] = AgileSellerManager::getLinkedSellerID($this->context->customer->id);    $this->object->indexed = 0;      if (Tools::getValue('submitSave'))    {        $R6E3CED3C0C347D45115DA9AA41DEEEDE = $this->object->getShippingMethod();     $RDB2AC34158A0DC2A606367C8DA71E2AB = $this->object->getRangeTable();       $this->object->deleteDeliveryPrice($RDB2AC34158A0DC2A606367C8DA71E2AB);     $RD95834690BF6AC6330E59B2EB55DB0BD = Carrier::getDeliveryPriceByRanges($RDB2AC34158A0DC2A606367C8DA71E2AB, $this->id_object);          $R55A6E2FCD720B0659D56C3BB489510E9 = array();     foreach ($_POST as $RF413F06AEBBCEF5E1C8B1019DEE6FE6B => $R7D0596C36891967F3BB9D994B4A97C19)      if (strstr($RF413F06AEBBCEF5E1C8B1019DEE6FE6B, 'fees_'))      {       $R2390DD9144446AC1FF8975094BA84CB9 = explode('_', $RF413F06AEBBCEF5E1C8B1019DEE6FE6B);         $R63D0786ECC7B962F8285396746DC2145 = number_format(abs(str_replace(',', '.', $R7D0596C36891967F3BB9D994B4A97C19)), 6, '.', '');       $R93363A629C0B81EF8BCB4A37B34319FD = 0;       foreach ($RD95834690BF6AC6330E59B2EB55DB0BD as $R0F8134FB6038EBCD7155F1DE5F067C73)        if ($R0F8134FB6038EBCD7155F1DE5F067C73['id_zone'] == $R2390DD9144446AC1FF8975094BA84CB9[1] && $R0F8134FB6038EBCD7155F1DE5F067C73['id_'.$RDB2AC34158A0DC2A606367C8DA71E2AB] == $R2390DD9144446AC1FF8975094BA84CB9[2])         $R93363A629C0B81EF8BCB4A37B34319FD = $R0F8134FB6038EBCD7155F1DE5F067C73;       if ($R93363A629C0B81EF8BCB4A37B34319FD && $R63D0786ECC7B962F8285396746DC2145 == $R93363A629C0B81EF8BCB4A37B34319FD['price'])        continue;         $R55A6E2FCD720B0659D56C3BB489510E9[] = array(        'id_range_price' => ($R6E3CED3C0C347D45115DA9AA41DEEEDE == Carrier::SHIPPING_METHOD_PRICE) ? (int)$R2390DD9144446AC1FF8975094BA84CB9[2] : null,        'id_range_weight' => ($R6E3CED3C0C347D45115DA9AA41DEEEDE == Carrier::SHIPPING_METHOD_WEIGHT) ? (int)$R2390DD9144446AC1FF8975094BA84CB9[2] : null,        'id_carrier' => (int)$this->id_object,        'id_zone' => (int)$R2390DD9144446AC1FF8975094BA84CB9[1],        'price' => $R63D0786ECC7B962F8285396746DC2145,        );      }        $this->object->addDeliveryPrice($R55A6E2FCD720B0659D56C3BB489510E9, true);       }else if (Tools::getValue('submitBack'))    {     Tools::redirect('index.php?process=shipping&fc=module&module=agilesellershipping&controller=sellercarrierdetail&id_carrier='.$this->id_object);    }   }  }    